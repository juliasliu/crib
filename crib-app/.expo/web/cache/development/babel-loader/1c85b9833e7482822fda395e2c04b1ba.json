{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/julialiu/Development/Julia Workspace/crib/crib-app/components/segmentedControl.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nvar shadow = {\n  shadowColor: \"#000\",\n  shadowOffset: {\n    width: 0,\n    height: 2\n  },\n  shadowOpacity: 0.23,\n  shadowRadius: 2.62,\n  elevation: 4\n};\nvar width = Dimensions.get('screen').width - 32;\n\nvar SegmentedControl = function SegmentedControl(props) {\n  var _props$tabs, _props$tabs2;\n\n  var translateValue = (width - 4) / (props == null ? void 0 : (_props$tabs = props.tabs) == null ? void 0 : _props$tabs.length);\n\n  var _React$useState = React.useState(new Animated.Value(0)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tabTranslate = _React$useState2[0],\n      setTabTranslate = _React$useState2[1];\n\n  var memoizedTabPressCallback = React.useCallback(function (index) {\n    props == null ? void 0 : props.onChange(index);\n  }, []);\n  useEffect(function () {\n    Animated.spring(tabTranslate, {\n      toValue: (props == null ? void 0 : props.currentIndex) * translateValue,\n      stiffness: 180,\n      damping: 20,\n      mass: 1,\n      useNativeDriver: true\n    }).start();\n  }, [props == null ? void 0 : props.currentIndex]);\n  return React.createElement(Animated.View, {\n    style: [styles.segmentedControlWrapper, {\n      backgroundColor: props == null ? void 0 : props.segmentedControlBackgroundColor\n    }, {\n      paddingVertical: props == null ? void 0 : props.paddingVertical\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, React.createElement(Animated.View, {\n    style: [_objectSpread(_objectSpread({}, StyleSheet.absoluteFill), {}, {\n      position: \"absolute\",\n      width: (width - 4) / (props == null ? void 0 : (_props$tabs2 = props.tabs) == null ? void 0 : _props$tabs2.length),\n      top: 0,\n      marginVertical: 2,\n      marginHorizontal: 2,\n      backgroundColor: props == null ? void 0 : props.activeSegmentBackgroundColor,\n      borderRadius: 8\n    }, shadow), {\n      transform: [{\n        translateX: tabTranslate\n      }]\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), props == null ? void 0 : props.tabs.map(function (tab, index) {\n    var isCurrentIndex = (props == null ? void 0 : props.currentIndex) === index;\n    return React.createElement(TouchableOpacity, {\n      key: index,\n      style: [styles.textWrapper],\n      onPress: function onPress() {\n        return memoizedTabPressCallback(index);\n      },\n      activeOpacity: 0.7,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      numberOfLines: 1,\n      style: [styles.textStyles, {\n        color: props == null ? void 0 : props.textColor\n      }, isCurrentIndex && {\n        color: props == null ? void 0 : props.activeTextColor\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, tab));\n  }));\n};\n\nvar styles = StyleSheet.create({\n  segmentedControlWrapper: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderRadius: 8,\n    width: width,\n    marginVertical: 20\n  },\n  textWrapper: {\n    flex: 1,\n    elevation: 9,\n    paddingHorizontal: 5\n  },\n  textStyles: {\n    fontSize: 18,\n    textAlign: 'center',\n    fontWeight: '600'\n  }\n});\nSegmentedControl.propTypes = {\n  tabs: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onChange: PropTypes.func.isRequired,\n  currentIndex: PropTypes.number.isRequired,\n  segmentedControlBackgroundColor: PropTypes.string,\n  activeSegmentBackgroundColor: PropTypes.string,\n  textColor: PropTypes.string,\n  activeTextColor: PropTypes.string,\n  paddingVertical: PropTypes.number\n};\nSegmentedControl.defaultProps = {\n  tabs: [],\n  onChange: function onChange() {},\n  currentIndex: 0,\n  segmentedControlBackgroundColor: '#E5E5EA',\n  activeSegmentBackgroundColor: 'white',\n  textColor: 'black',\n  activeTextColor: 'black',\n  paddingVertical: 12\n};\nexport default SegmentedControl;","map":{"version":3,"sources":["/Users/julialiu/Development/Julia Workspace/crib/crib-app/components/segmentedControl.tsx"],"names":["PropTypes","React","useEffect","shadow","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","Dimensions","get","SegmentedControl","props","translateValue","tabs","length","useState","Animated","Value","tabTranslate","setTabTranslate","memoizedTabPressCallback","useCallback","index","onChange","spring","toValue","currentIndex","stiffness","damping","mass","useNativeDriver","start","styles","segmentedControlWrapper","backgroundColor","segmentedControlBackgroundColor","paddingVertical","StyleSheet","absoluteFill","position","top","marginVertical","marginHorizontal","activeSegmentBackgroundColor","borderRadius","transform","translateX","map","tab","isCurrentIndex","textWrapper","textStyles","color","textColor","activeTextColor","create","display","flexDirection","alignItems","flex","paddingHorizontal","fontSize","textAlign","fontWeight","propTypes","arrayOf","string","isRequired","func","number","defaultProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { Animated, Dimensions, StyleSheet, Text, TouchableOpacity } from 'react-native';\n\n\nconst shadow = {\n  shadowColor: \"#000\",\n  shadowOffset: {\n    width: 0,\n    height: 2,\n  },\n  shadowOpacity: 0.23,\n  shadowRadius: 2.62,\n\n  elevation: 4,\n}\n\n// So that it stretches in landscape mode.\nconst width = Dimensions.get('screen').width - 32;\n\nconst SegmentedControl = (props) => {\n  const translateValue = ((width - 4) / props?.tabs?.length);\n  const [tabTranslate, setTabTranslate] = React.useState(new Animated.Value(0));\n\n  // useCallBack with an empty array as input, which will call inner lambda only once and memoize the reference for future calls\n  const memoizedTabPressCallback = React.useCallback(\n    (index) => {\n      props?.onChange(index);\n    },\n    []\n  );\n\n  useEffect(() => {\n    // Animating the active index based current index\n    Animated.spring(tabTranslate, {\n      toValue: props?.currentIndex * translateValue,\n      stiffness: 180,\n      damping: 20,\n      mass: 1,\n      useNativeDriver: true\n    }).start()\n  }, [props?.currentIndex])\n\n  return (\n    <Animated.View style={[\n      styles.segmentedControlWrapper,\n      {\n        backgroundColor: props?.segmentedControlBackgroundColor\n      },\n      {\n        paddingVertical: props?.paddingVertical,\n      }\n    ]}>\n      <Animated.View\n        style={[{\n          ...StyleSheet.absoluteFill,\n          position: \"absolute\",\n          width: (width - 4) / props?.tabs?.length,\n          top: 0,\n          marginVertical: 2,\n          marginHorizontal: 2,\n          backgroundColor: props?.activeSegmentBackgroundColor,\n          borderRadius: 8,\n          ...shadow,\n        },\n        {\n          transform: [\n            {\n              translateX: tabTranslate\n            }\n          ]\n        }]}\n      >\n      </Animated.View>\n      {\n        props?.tabs.map((tab, index) => {\n          const isCurrentIndex = props?.currentIndex === index;\n          return (\n            <TouchableOpacity\n              key={index}\n              style={[styles.textWrapper]}\n              onPress={() => memoizedTabPressCallback(index)}\n              activeOpacity={0.7} >\n              <Text numberOfLines={1} style={[styles.textStyles, { color: props?.textColor }, isCurrentIndex && { color: props?.activeTextColor }]}>{tab}</Text>\n            </TouchableOpacity>\n          )\n        })\n      }\n    </Animated.View >\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  segmentedControlWrapper: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderRadius: 8,\n    width: width,\n    marginVertical: 20\n  },\n  textWrapper: {\n    flex: 1,\n    elevation: 9,\n    paddingHorizontal: 5\n  },\n  textStyles: {\n    fontSize: 18,\n    textAlign: 'center',\n    fontWeight: '600',\n  }\n})\n\nSegmentedControl.propTypes = {\n  tabs: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onChange: PropTypes.func.isRequired,\n  currentIndex: PropTypes.number.isRequired,\n  segmentedControlBackgroundColor: PropTypes.string,\n  activeSegmentBackgroundColor: PropTypes.string,\n  textColor: PropTypes.string,\n  activeTextColor: PropTypes.string,\n  paddingVertical: PropTypes.number\n}\n\n\nSegmentedControl.defaultProps = {\n  tabs: [],\n  onChange: () => { },\n  currentIndex: 0,\n  segmentedControlBackgroundColor: '#E5E5EA',\n  activeSegmentBackgroundColor: 'white',\n  textColor: 'black',\n  activeTextColor: 'black',\n  paddingVertical: 12\n}\n\nexport default SegmentedControl;"]},"metadata":{},"sourceType":"module"}